diff --git a/Foundation/URLSession/libcurl/MultiHandle.swift b/Foundation/URLSession/libcurl/MultiHandle.swift
index 8a389c52..13d246e8 100644
--- a/Foundation/URLSession/libcurl/MultiHandle.swift
+++ b/Foundation/URLSession/libcurl/MultiHandle.swift
@@ -122,9 +122,7 @@ fileprivate extension URLSession._MultiHandle {
         } else if socketSources != nil && action == .unregister {
             // We need to release the stored pointer:
             if let opaque = socketSourcePtr {
-                let s: Unmanaged<_SocketSources> = Unmanaged<_SocketSources>.fromOpaque(opaque)
-                s.takeUnretainedValue().tearDown(socket: socket, queue: queue)
-                s.release()
+                Unmanaged<_SocketSources>.fromOpaque(opaque).release()
             }
             socketSources = nil
         }
@@ -409,7 +407,6 @@ fileprivate extension URLSession._MultiHandle._Timeout {
 fileprivate class _SocketSources {
     var readSource: DispatchSource?
     var writeSource: DispatchSource?
-    let activeSockets = DispatchGroup()
 
     func createReadSource(socket: CFURLSession_socket_t, queue: DispatchQueue, handler: DispatchWorkItem) {
         guard readSource == nil else { return }
@@ -418,13 +415,7 @@ fileprivate class _SocketSources {
 #else
         let s = DispatchSource.makeReadSource(fileDescriptor: socket, queue: queue)
 #endif
-        activeSockets.enter()
         s.setEventHandler(handler: handler)
-        s.setCancelHandler(handler: DispatchWorkItem { [weak self] in
-            guard let self = self else { return }
-            self.activeSockets.leave()
-        })
-
         readSource = s as? DispatchSource
         s.resume()
     }
@@ -436,26 +427,12 @@ fileprivate class _SocketSources {
 #else
         let s = DispatchSource.makeWriteSource(fileDescriptor: socket, queue: queue)
 #endif
-        activeSockets.enter()
-        s.setCancelHandler(handler: DispatchWorkItem { [weak self] in
-            guard let self = self else { return }
-            self.activeSockets.leave()
-        })
         s.setEventHandler(handler: handler)
         writeSource = s as? DispatchSource
         s.resume()
     }
 
-    func tearDown(socket: CFURLSession_socket_t, queue: DispatchQueue) {
-        activeSockets.notify(queue: queue) {
-            withExtendedLifetime(self) {
-#if os(Windows)
-                closesocket(socket)
-#else
-                close(socket)
-#endif
-            }
-        }
+    func tearDown() {
         if let s = readSource {
             s.cancel()
         }
