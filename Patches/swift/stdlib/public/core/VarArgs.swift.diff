diff --git a/stdlib/public/core/VarArgs.swift b/stdlib/public/core/VarArgs.swift
index 8576a86568b..08d04eaa37a 100644
--- a/stdlib/public/core/VarArgs.swift
+++ b/stdlib/public/core/VarArgs.swift
@@ -63,6 +63,15 @@ protocol _CVarArgAligned: CVarArg {
   var _cVarArgAlignment: Int { get }
 }
 
+/// Some pointers require an alternate object to be retained.  The object
+/// that is returned will be used with _cVarArgEncoding and held until
+/// the closure is complete.  This is required since autoreleased storage
+/// is not available on all platforms.
+public protocol _CVarArgObject: CVarArg {
+  /// Returns the alternate object that should be encoded.
+  var _cVarArgObject: CVarArg { get }
+}
+
 #if arch(x86_64)
 @usableFromInline
 internal let _countGPRegisters = 6
@@ -462,6 +471,9 @@ final internal class __VaListBuilder {
   @usableFromInline // c-abi
   internal var storage: ContiguousArray<Int>
 
+  @usableFromInline // c-abi
+  internal var retainer = [CVarArg]()
+
   @inlinable // c-abi
   internal init() {
     // prepare the register save area
@@ -473,6 +485,14 @@ final internal class __VaListBuilder {
 
   @inlinable // c-abi
   internal func append(_ arg: CVarArg) {
+    var arg = arg
+
+    // We may need to retain an object that provides a pointer value.
+    if let obj = arg as? _CVarArgObject {
+      arg = obj._cVarArgObject
+      retainer.append(arg)
+    }
+
     var encoded = arg._cVarArgEncoding
 
 #if arch(x86_64) || arch(arm64)
@@ -560,6 +580,14 @@ final internal class __VaListBuilder {
 
   @inlinable // c-abi
   internal func append(_ arg: CVarArg) {
+    var arg = arg
+
+    // We may need to retain an object that provides a pointer value.
+    if let obj = arg as? _CVarArgObject {
+      arg = obj._cVarArgObject
+      retainer.append(arg)
+    }
+
     // Write alignment padding if necessary.
     // This is needed on architectures where the ABI alignment of some
     // supported vararg type is greater than the alignment of Int, such
@@ -665,6 +693,9 @@ final internal class __VaListBuilder {
   @usableFromInline // c-abi
   internal var storage: UnsafeMutablePointer<Int>?
 
+  @usableFromInline // c-abi
+  internal var retainer = [CVarArg]()
+
   internal static var alignedStorageForEmptyVaLists: Double = 0
 }
 
